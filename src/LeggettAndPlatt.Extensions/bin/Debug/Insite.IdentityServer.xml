<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Insite.IdentityServer</name>
    </assembly>
    <members>
        <member name="T:Insite.IdentityServer.AspNetIdentity.AccessTokenProvider">
            <summary>The access token provider.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AccessTokenProvider.GetAccessToken(System.Security.Principal.IPrincipal)">
            <summary>The get access token.</summary>
            <param name="user">The user.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AccessTokenProvider.ValidateAccessToken(System.String)">
            <summary>Validates the token.</summary>
            <param name="token">The token.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="F:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.UnitOfWork">
            <summary>The unit of work.</summary>
        </member>
        <member name="F:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.SqlPasswordHasher">
            <summary>The sql password hasher.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.#ctor(Insite.Core.Interfaces.Data.IUnitOfWorkFactory,Insite.IdentityServer.AspNetIdentity.SqlPasswordHasher)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService"/> class.</summary>
            <param name="unitOfWorkFactory">The unit of work factory.</param>
            <param name="sqlPasswordHasher">The sql password hasher.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.ValidatePasswordHistory(System.String,System.String,System.String)">
            <summary>Validates if the new password has previously been used by the user.</summary>
            <param name="userName">The user name for which to validate the new password.</param>
            <param name="oldPassword">The users current password.</param>
            <param name="newPassword">The new password the user is requesting.</param>
            <returns>True if the new password has not previously been used by the user.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.StorePasswordHistory(System.String,System.String,System.String)">
            <summary>Store the users new password in the password history table.</summary>
            <param name="userName">The user name for which to store the new password.</param>
            <param name="oldPassword">The old password to hash and store.</param>
            <param name="newPassword">The new password to hash and store.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.HashPasswordAndAddToAdminUserProfilePasswords(System.String,Insite.Data.Entities.AdminUserProfile)">
            <summary>Validate the password is not already stored, hash, and save to admin user profile's password history.</summary>
            <param name="password">The password to hash and store.</param>
            <param name="adminUserProfile">The admin user profile to store the password hash against.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.AdminUserProfilePasswordService.GetAdminUserProfile(System.String)">
            <summary>The get admin user profile.</summary>
            <param name="userName">The user name.</param>
            <returns>The <see cref="T:Insite.Data.Entities.AdminUserProfile"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.ClaimsFactory">
            <summary>The claims factory.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.ClaimsFactory.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.ClaimsFactory" /> class.</summary>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService">
            <summary>ASP.Net Identity Authentication Service implementation.</summary>
        </member>
        <member name="F:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.HttpContext">
            <summary>The http context.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.#ctor(System.Web.HttpContextBase)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService"/> class.</summary>
            <param name="httpContext">The HTTP context.</param>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.AuthenticationManager">
            <summary>Gets the authentication manager.</summary>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IdentityDbContext">
            <summary>Gets the identity database context.</summary>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IdentityUserManager">
            <summary>Gets the identity user manager.</summary>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.PasswordValidator">
            <summary>Gets the password validator.</summary>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.UserValidator">
            <summary>Gets the user validator.</summary>
        </member>
        <member name="P:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.Identity">
            <summary>Gets the identity.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.MinRequiredPasswordLength">
            <summary>Returns the Minimum Required Password Length.</summary>
            <returns>The Minimum Required Password Length.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.MinRequiredDigits">
            <summary>Returns the Miniumum Required Digits.</summary>
            <returns>The Miniumum Required Digits.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.MinRequiredNonAlphanumericCharacters">
            <summary>Returns the Minimum Required Non Alphanumeric Characters.</summary>
            <returns>The Minimum Required Non Alphanumeric Characters.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.MinRequiredLowercaseCharacters">
            <summary>Returns the Miniumum Required Lowercase Characters.</summary>
            <returns>The Miniumum Required Lowercase Characters.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.MinRequiredUppercaseCharacters">
            <summary>Returns the Miniumum Required Uppercase Characters.</summary>
            <returns>The Miniumum Required Uppercase Characters.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.UserNameAlreadyExists(System.String)">
            <summary>Checks if the supplied User Name already exists.</summary>
            <param name="userName">The User Name to check for.</param>
            <returns>True if the User Name already exists.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.EmailAlreadyExists(System.String)">
            <summary>Checks if the supplied Email already exists.</summary>
            <param name="email">The Email to check for.</param>
            <returns>True if the Email already exists.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.RequiresUniqueEmail">
            <summary>Whether the Authentication Service requires emails to be unique.</summary>
            <returns>True if Email is required to be unique.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.AllowOnlyAlphanumericUserNames">
            <summary>Whether the Authentication Service allow only alphanumeric user names.</summary>
            <returns>True if UserName allow only alphanumeric user names.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.RequiresQuestionAndAnswer">
            <summary>Whether the Authentication Service requires Password Question and Answer, always returns false.</summary>
            <returns>True if Question and Answer is required.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IsValidPassword(System.String)">
            <summary>Insures a <paramref name="password"/> to see if
            it meets complexity requirements.</summary>
            <param name="password">The password to check.</param>
            <returns>True if the <paramref name="password"/> meets the required
            complexity.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GeneratePassword">
            <summary>Generates a valid password based on complexity requirements.</summary>
            <returns>A valid password.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.ChangePassword(System.String,System.String,System.String)">
            <summary>Changes the supplied user's password.</summary>
            <param name="userName">UserName to change password for.</param>
            <param name="oldPassword">OldPassword to change.</param>
            <param name="newPassword">NewPassword to change to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.ResetPassword(System.String)">
            <summary>Reset the supplied user's password.</summary>
            <param name="userName">UserName to reset the password for.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GeneratePasswordResetUrl(System.String,System.Boolean)">
            <summary>Generates a password reset url for the specified user</summary>
            <param name="userName">The user name for which to generate the url</param>
            <param name="isReset">Determines if the url will be for the reset password page or account activation page</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.VerifyPasswordResetTokenForUser(System.String,System.String)">
            <summary>Returns whether the supplied <paramref name="resetToken"/> is valid.</summary>
            <param name="userName">The user name.</param>
            <param name="resetToken">A valid reset token for this user.</param>
            <returns>true if valid.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.ResetPasswordForUser(System.String,System.String,System.String)">
            <summary>Changes the password for a user who has generated a reset token</summary>
            <param name="userName">The user name.</param>
            <param name="newPassword">The new password to assign to the user.</param>
            <param name="resetToken">A valid reset token for this user.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.SetUserAsAuthenticated(System.String)">
            <summary>Sets a user (usually for a new Account) to be Authenticated.</summary>
            <param name="userName">The UserName.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IsAuthenticated">
            <summary>Returns whether the current user is authenticated.</summary>
            <returns>True if the user is authenticated.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IsLockedOut(System.String)">
            <summary>Returns whether the current user is locked out.</summary>
            <param name="userName">The UserName.</param>
            <returns>True if the user is locked out.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.LockUserOut(System.String)">
            <summary>The lock user out.</summary>
            <param name="userName">The user name.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.UnlockUser(System.String)">
            <summary>The unlock user.</summary>
            <param name="userName">The user name.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.ValidateUser(System.String,System.String)">
            <summary>Insures the supplied <paramref name="userName"/> and <paramref name="password"/> are valid.</summary>
            <param name="userName">The log in User Name.</param>
            <param name="password">The log in Password.</param>
            <returns>True if valid user.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.SignOut">
            <summary>Signs a User out.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.CreateUser(System.String,System.String)">
            <summary>Creates a user without a password.</summary>
            <param name="userName">The username to use for the user.</param>
            <param name="email">The email to use for the user.</param>
            <returns>A comma-delimited string of errors that occurred while creating the user.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.CreateUser(System.String,System.String,System.String)">
            <summary>Creates the user.</summary>
            <param name="userName">Name of the user.</param>
            <param name="email">The email.</param>
            <param name="password">The password.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.UpdateUser(System.String,System.String,System.String)">
            <summary>Updates the user.</summary>
            <param name="userName">Name of the user.</param>
            <param name="newUserName">The new user name.</param>
            <param name="email">The email.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.UpdateUser(System.String,System.String)">
            <summary>Updates the user.</summary>
            <param name="userName">Name of the user.</param>
            <param name="email">The email.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.DeleteUser(System.String)">
            <summary>Deletes the user.</summary>
            <param name="userName">Name of the user.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GetAllRoles">
            <summary>Returns all the Roles for the supplied Application Name.</summary>
            <returns>List of Roles.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.RoleExists(System.String)">
            <summary>Checks if a Role exists.</summary>
            <param name="roleName">Name of the role.</param>
            <returns>True if the supplied RoleName exists.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.CreateRole(System.String)">
            <summary>Creates a Role in the supplied Application Name.</summary>
            <param name="roleName">The RoleName to create.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.DeleteRole(System.String)">
            <summary>Deletes the role.</summary>
            <param name="roleName">Name of the role.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GetRolesForUser(System.String)">
            <summary>Gets the roles for user.</summary>
            <param name="userName">Name of the user.</param>
            <returns>The list of <see cref="T:Insite.Core.Interfaces.Plugins.Security.RoleDto"/>s for the user.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.AddUserToRole(System.String,System.String)">
            <summary>Adds the user to role.</summary>
            <param name="userName">Name of the user.</param>
            <param name="roleName">Name of the role.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.RemoveUserFromRole(System.String,System.String)">
            <summary>Removes the user from role.</summary>
            <param name="userName">Name of the user.</param>
            <param name="roleName">Name of the role.</param>
            <returns>Blank if successful, error messages if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.IsUserInRole(System.String,System.String)">
            <summary>Insures the supplied <paramref name="userName"/> is in the
            supplied roleName.</summary>
            <param name="userName">The log in User Name.</param>
            <param name="roleName">The Name to check for.</param>
            <returns>True if User Name is in Role, False if not.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
            unmanaged resources.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GetOrCreateIdentityUser(System.String)">
            <summary>The get or create identity user.  Presumption is that if it hits these methods, a UserProfile record is already created
            and
            somehow it got out of sync with AspNetUsers, so we are going to add a record.  Only seen this happen with third party
            logins.</summary>
            <param name="userName">The user name.</param>
            <returns>The <see cref="T:Microsoft.AspNet.Identity.EntityFramework.IdentityUser"/>.</returns>
            <exception cref="T:System.Exception">If there is an error creating the user.</exception>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityAuthenticationService.GetAllUsersWithRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>The get all users with roles.</summary>
            <param name="roles">The roles.</param>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentityCookieProvider">
            <summary>The identity cookie provider.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityCookieProvider.GetAuthenticationCookie(System.String,System.String[])">
            <summary>The get authentication cookie.</summary>
            <param name="userName">The user name.</param>
            <param name="roles">The roles.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentityDbContext">
            <summary>Database context for ASP.Net Identity.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityDbContext.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityDbContext"/> class.</summary>
            <param name="connectionString">The connection String.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityDbContext.Create">
            <summary>Creates this instance.</summary>
            <returns>The <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityDbContext"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentitySignInManager">
            <summary>    Sign In Manager for ASP.Net Identity.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentitySignInManager.#ctor(Insite.IdentityServer.AspNetIdentity.IdentityUserManager,Microsoft.Owin.Security.IAuthenticationManager)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentitySignInManager"/> class.</summary>
            <param name="userManager">The user manager.</param>
            <param name="authenticationManager">The authentication manager.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentitySignInManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Insite.IdentityServer.AspNetIdentity.IdentitySignInManager},Microsoft.Owin.IOwinContext)">
            <summary>Creates the specified options.</summary>
            <param name="options">The options.</param>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentitySignInManager"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentityUserManager">
            <summary>User Manager for ASP.Net Identity.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserManager.#ctor(Insite.IdentityServer.AspNetIdentity.IdentityUserStore,Insite.IdentityServer.Options.SecurityOptionsType)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityUserManager"/> class.</summary>
            <param name="store">The store.</param>
            <param name="securityOptionsType">The type of security options (Console or Storefront) that should be used for this user manager.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Insite.IdentityServer.AspNetIdentity.IdentityUserManager},Microsoft.Owin.IOwinContext)">
            <summary>Creates an <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityUserManager"/> for the specified options.</summary>
            <param name="options">The options.</param>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityUserManager"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserManager.GenerateRandomPassword">
            <summary>Generates a random password.</summary>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserManager.GenerateRandomPasswordAsync">
            <summary>Generates a random password asynchronously</summary>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.IdentityUserStore">
            <summary>The user store.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserStore.#ctor(Insite.IdentityServer.AspNetIdentity.IdentityDbContext)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.AspNetIdentity.IdentityUserStore"/> class.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserStore.FindByNameAsync(System.String)">
            <summary>This is overridden to prevent the .ToUpper() call on the UserName property being searched.</summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.IdentityUserStore.FindByEmailAsync(System.String)">
            <summary>This is overridden to prevent the .ToUpper() call on the Email property being searched.</summary>
        </member>
        <member name="T:Insite.IdentityServer.AspNetIdentity.SqlPasswordHasher">
            <summary>
                This class encrypts / decrypts the same way SqlMembership did, it is for backwards compatability only, most sites
                should use hashed passwords now anyway.
            </summary>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.SqlPasswordHasher.VerifyHashedPassword(System.String,System.String)">
            <summary>Verify that a password matches the hashedPassword</summary>
            <param name="hashedPassword">The hashed password.</param>
            <param name="providedPassword">The provided password.</param>
            <returns>The <see cref="T:Microsoft.AspNet.Identity.PasswordVerificationResult"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.AspNetIdentity.SqlPasswordHasher.EncryptPassword(System.String,System.Int32,System.String)">
            <summary>Encrypts the password.  This is copied from the existing SQL providers and is provided only for back-compat.</summary>
            <param name="pass">The pass.</param>
            <param name="passwordFormat">The password format.</param>
            <param name="salt">The salt.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.SsoClientRepository">
            <summary>The Sso Client Repository.</summary>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.GetTable">
            <summary>Gets an IQueryable to query Sso Clients.</summary>
            <returns>The <see cref="T:System.Linq.IQueryable`1"/></returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.Get(System.String)">
            <summary>Gets the specified Sso Client.</summary>
            <param name="clientId">The client identifier.</param>
            <returns>The <see cref="T:Insite.Core.Security.SsoClientDto" /> or null if not found.</returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.Insert(Insite.Core.Security.SsoClientDto)">
            <summary>Inserts the specified Sso Client.</summary>
            <param name="ssoClientDto">The sso client dto.</param>
            <returns>The <see cref="T:Insite.Core.Security.SsoClientResult"/> indicating if the operation was successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.Update(Insite.Core.Security.SsoClientDto)">
            <summary>Updates the specified Sso Client.</summary>
            <param name="ssoClientDto">The sso client dto.</param>
            <returns>The <see cref="T:Insite.Core.Security.SsoClientResult"/> indicating if the operation was successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.Delete(Insite.Core.Security.SsoClientDto)">
            <summary>Deletes the specified Sso Client.</summary>
            <param name="ssoClientDto">The sso client dto.</param>
            <returns>The <see cref="T:Insite.Core.Security.SsoClientResult"/> indicating if the operation was successful.</returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.AddIncludes(System.Linq.IQueryable{IdentityServer3.EntityFramework.Entities.Client})">
            <summary>Adds the includes.</summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.ToSsoClientDto(IdentityServer3.EntityFramework.Entities.Client)">
            <summary>Maps an Sso Client to an Sso Client Dto.</summary>
            <param name="client">The client.</param>
            <returns>The <see cref="T:Insite.Core.Security.SsoClientDto"/></returns>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.UpdateClient(IdentityServer3.EntityFramework.ClientConfigurationDbContext,Insite.Core.Security.SsoClientDto,IdentityServer3.EntityFramework.Entities.Client)">
            <summary>Updates the client.</summary>
            <param name="db">The client configuration context</param>
            <param name="ssoClientDto">The sso client dto.</param>
            <param name="client">The client.</param>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.SetScope(IdentityServer3.EntityFramework.Entities.Client,System.Boolean,System.String)">
            <summary>Sets the scope.</summary>
            <param name="client">The client.</param>
            <param name="include">if set to <c>true</c> [include].</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.UpdateClientRedirectUris(Insite.Core.Security.SsoClientDto,IdentityServer3.EntityFramework.Entities.Client)">
            <summary>Updates the client redirect uris.</summary>
            <param name="ssoClientDto">The sso client dto.</param>
            <param name="client">The client.</param>
        </member>
        <member name="M:Insite.IdentityServer.SsoClientRepository.GetDbContext">
            <summary>Gets the database context.</summary>
            <returns>The <see cref="T:IdentityServer3.EntityFramework.ClientConfigurationDbContext"/></returns>
        </member>
        <member name="T:Insite.IdentityServer.Certificate">
            <summary>The certificate.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Certificate.Get">
            <summary>The get.</summary>
            <returns>The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.Clients">
            <summary>The standard client set up used to populate the database on first run.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Clients.Get">
            <summary>The get returns the standard client set up.</summary>
            <returns>The list of standard clients.</returns>
        </member>
        <member name="T:Insite.IdentityServer.Controllers.ExternalProviderController">
            <summary>The external provider controller.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.AuthenticationService">
            <summary>The authentication service.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.CustomerService">
            <summary>The customer service.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.HttpContext">
            <summary>The http context.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.PerRequestCacheManager">
            <summary>The per request cache manager.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.SessionService">
            <summary>The session service.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.TranslationLocalizer">
            <summary>The translation localizer.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Controllers.ExternalProviderController.UrlProvider">
            <summary>The url provider.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Controllers.ExternalProviderController.#ctor(Insite.Core.Interfaces.Localization.ITranslationLocalizer,Insite.Account.Services.ISessionService,Insite.Customers.Services.ICustomerService,System.Web.HttpContextBase,Insite.Core.Interfaces.Plugins.Caching.IPerRequestCacheManager,Insite.Core.Interfaces.Plugins.Security.IAuthenticationService,Insite.WebFramework.Routing.IUrlProvider)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.Controllers.ExternalProviderController"/> class.</summary>
            <param name="translationLocalizer">The translation localizer.</param>
            <param name="sessionService">The session service.</param>
            <param name="customerService">The customer Service.</param>
            <param name="httpContext">The http Context.</param>
            <param name="perRequestCacheManager">The per Request Cache Manager.</param>
            <param name="authenticationService">The authentication Service.</param>
            <param name="urlProvider">The url Provider.</param>
        </member>
        <member name="M:Insite.IdentityServer.Controllers.ExternalProviderController.Callback">
            <summary>The callback.</summary>
            <returns>The IHttpActionResult/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.Controllers.ExternalProviderController.Get(System.String)">
            <summary>The get.</summary>
            <param name="returnUrl">The return Url.</param>
            <returns>The IHttpActionResult/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.Controllers.ExternalProviderController.GetReturnUrl(System.String,System.String)">
            <summary>The get return url.</summary>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.Models.ExternalProviderLinkCollectionModel">
            <summary>The external provider link collection model.</summary>
        </member>
        <member name="P:Insite.IdentityServer.Models.ExternalProviderLinkCollectionModel.ExternalProviders">
            <summary>Gets or sets the accounts.</summary>
        </member>
        <member name="T:Insite.IdentityServer.Models.ExternalProviderLinkModel">
            <summary>The external provider link model.</summary>
        </member>
        <member name="P:Insite.IdentityServer.Models.ExternalProviderLinkModel.Caption">
            <summary>Gets or sets the caption.</summary>
        </member>
        <member name="P:Insite.IdentityServer.Models.ExternalProviderLinkModel.Url">
            <summary>Gets or sets the url.</summary>
        </member>
        <member name="T:Insite.IdentityServer.Factory">
            <summary>The Identity Server factory that configures Identity Server.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Factory.Configure(System.String)">
            <summary>The Configure method creates and configures the <see cref="T:IdentityServer3.Core.Configuration.IdentityServerServiceFactory"/>.</summary>
            <param name="connectionString">The connection String for the .NET Identity databqase.</param>
            <returns>The <see cref="T:IdentityServer3.Core.Configuration.IdentityServerServiceFactory"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.Factory.GetJsonWebToken(System.Security.Principal.IPrincipal,System.String,System.String,System.String)">
            <summary>Creates and returns a valid JWT for the supplied <see cref="T:System.Security.Principal.IPrincipal"/>.</summary>
            <param name="principal">The principal.</param>
            <param name="issuerUri">The issuer uri.</param>
            <param name="clientId">The client id.</param>
            <param name="scope">The scope.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.Factory.GetJsonWebTokenSafe(System.Security.Principal.IPrincipal,System.String)">
            <summary>Creates and returns a valid JWT for the supplied <see cref="T:System.Security.Principal.IPrincipal"/>.</summary>
            <param name="principal">The principal.</param>
            <param name="issuerUri">The issuer uri.</param>
            <returns>The web token or a blank string if unauthenticated or there is an error.</returns>
            <remarks>This method will never throw</remarks>
        </member>
        <member name="M:Insite.IdentityServer.Factory.ConfigureClients(System.Collections.Generic.IEnumerable{IdentityServer3.Core.Models.Client})">
            <summary>If no <see cref="T:IdentityServer3.Core.Models.Client"/>s exist in the database, this method populates the database with the supplied list of <see cref="T:IdentityServer3.Core.Models.Client"/>s.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Factory.ConfigureScopes(System.Collections.Generic.IEnumerable{IdentityServer3.Core.Models.Scope})">
            <summary>If no <see cref="T:IdentityServer3.Core.Models.Scope"/>s exist in the database, this method populates the database with the supplied list of <see cref="T:IdentityServer3.Core.Models.Scope"/>s.</summary>
            <param name="scopes">The scopes.</param>
        </member>
        <member name="T:Insite.IdentityServer.Options.SecurityOptions">
            <summary>The security options.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.ClientId">
            <summary>The Client Id.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.ClientSecret">
            <summary>The client secret.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.MobileId">
            <summary>The Mobile Id.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.ExternalClientId">
            <summary>The External Client Id.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.Scope">
            <summary>The scope.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.AdminClientId">
            <summary>The admin client id.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.ExternalAdminClientId">
            <summary>The admin client id.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.AdminScope">
            <summary>The admin scope.</summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.AdminClientSecret">
            <summary>The admin client secret.</summary>
        </member>
        <member name="P:Insite.IdentityServer.Options.SecurityOptions.CookieOptions">
            <summary>The cookie options.</summary>
        </member>
        <member name="P:Insite.IdentityServer.Options.SecurityOptions.IssuerUri">
            <summary>The issuer uri</summary>
        </member>
        <member name="P:Insite.IdentityServer.Options.SecurityOptions.RequireSsl">
            <summary>The require ssl </summary>
        </member>
        <member name="F:Insite.IdentityServer.Options.SecurityOptions.Schema">
            <summary>The schema.</summary>
        </member>
        <member name="T:Insite.IdentityServer.Scopes">
            <summary>The standard scope set up used to populate the database on first run.</summary>
        </member>
        <member name="M:Insite.IdentityServer.Scopes.Get">
            <summary>The get returns the standard scope set up.</summary>
            <returns>The list of standard scopes.</returns>
        </member>
        <member name="T:Insite.IdentityServer.UserService">
            <summary>The user service.</summary>
        </member>
        <member name="F:Insite.IdentityServer.UserService.CustomerService">
            <summary>The customer service.</summary>
        </member>
        <member name="M:Insite.IdentityServer.UserService.#ctor(Insite.IdentityServer.AspNetIdentity.IdentityUserManager,Insite.Core.Interfaces.Data.IUnitOfWorkFactory)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.UserService"/> class.</summary>
            <param name="userManager">The user manager.</param>
            <param name="unitOfWorkFactory">The unit of work factory.</param>
        </member>
        <member name="P:Insite.IdentityServer.UserService.UnitOfWork">
            <summary>Gets or sets the unit of work.</summary>
        </member>
        <member name="M:Insite.IdentityServer.UserService.AuthenticateExternalAsync(IdentityServer3.Core.Models.ExternalAuthenticationContext)">
            <summary>The authenticate external async.</summary>
            <param name="ctx">The ctx.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.UserService.AuthenticateLocalAsync(IdentityServer3.Core.Models.LocalAuthenticationContext)">
            <summary>The authenticate local async.</summary>
            <param name="ctx">The ctx.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.UserService.InstantiateNewUserFromExternalProviderAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>The instantiate new user from external provider async.</summary>
            <param name="provider">The provider.</param>
            <param name="providerId">The provider id.</param>
            <param name="claims">The claims.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Insite.IdentityServer.UserService.TryGetExistingUserFromExternalProviderClaimsAsync(System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>The try get existing user from external provider claims async.</summary>
            <param name="provider">The provider.</param>
            <param name="claims">The claims.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Insite.IdentityServer.UserServiceExtensions">
            <summary>The user service extensions.</summary>
        </member>
        <member name="M:Insite.IdentityServer.UserServiceExtensions.ConfigureUserService(IdentityServer3.Core.Configuration.IdentityServerServiceFactory,System.String)">
            <summary>The configure user service.</summary>
            <param name="factory">The factory.</param>
            <param name="connectionString">The conn string.</param>
        </member>
        <member name="T:Insite.IdentityServer.ViewService">
            <summary>The view service.</summary>
        </member>
        <member name="M:Insite.IdentityServer.ViewService.#ctor(IdentityServer3.Core.Services.Default.DefaultViewServiceOptions,IdentityServer3.Core.Services.Default.IViewLoader,Insite.Common.Dependencies.IDependencyLocator)">
            <summary>Initializes a new instance of the <see cref="T:Insite.IdentityServer.ViewService"/> class.</summary>
            <param name="config">The config.</param>
            <param name="viewLoader">The view loader.</param>
            <param name="dependencyLocator">The dependency locator.</param>
        </member>
        <member name="P:Insite.IdentityServer.ViewService.TranslationLocalizer">
            <summary>Gets or sets the translation localizer.</summary>
        </member>
        <member name="M:Insite.IdentityServer.ViewService.Error(IdentityServer3.Core.ViewModels.ErrorViewModel)">
            <summary>The error.</summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
    </members>
</doc>
